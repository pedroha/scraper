Done
0) Getting the index page and a topic page
1) Getting selectors with cheerio to get Lithuanian's word and hint
2) Gather all audio resources
3) Output database in pretty json (sorted database!)
4) Compressed json version, prettier json (longer lines)
   Hacked for english translation for first row
5) Front-end HTML page
6) Playable interface, stoppable! + automatic scrollable
7) Clickable
8) Deployed to labas.surge.sh
9) Mobile friendly
10) Retrieved all languages (through flags)
11) Attribution to
You must attribute the work to Goethe-Verlag and www.50languages.com

12) Weekend: audiosprites, ffmpeg, compression, howler.js
13) Collapsible design, for mobile friendly
14) Decoupled: LessonPlayer vs MediaPlayer
15) Deployed to root: http://labas.surge.sh

16) Configurable language scraper/web using config (added 'readable' for Ukranian)

TODO
-----

a) Clean up HTML markup: decouple audio mapping from the markup -> set up data-entry instead
   soundsConfig[language] + downloads

b) Add control panel: play, stop (display absolute / sticky!?)
c) Vocabulary for Lithuanian (scraping + images + audio)
d) Customize css coloring themes
e) Collect for all lanaguages in book2.de

React version!?
g) Dynamic loading (server-side + client side: isomorphic -> ReactJS!)

---------------------------------------------------------------------------

First deployment
-> Takes too long for iterative deployment since /web/audio is uploaded *every* time
-> Need to split audio files in a different subdomain (all at once?)

http://book2.surge.sh/audio/LT/0001.mp3
http://book2.surge.sh/audio/LT/0001.mp3


Split into 3 projects?
a) Utility library to support each of these projects
b) Audio project (to retrieve all audios into multiple folders) -> upload own subdomain
c) Multi-language: Web project (to upload for each language)


We can download all the AUDIO files in one big ZIP file!

----

Decision

Either, create a full HTML with all the nodes as DOM in HTML
Or pass JSON to create on the fly?

Easier for having all in the page (and perhaps as a JS object?)
-> Can play right away!

For prototyping: use 3 topics to loop through

----

Issues: this will try to load all <audio> files (too many, like 1400 files!)
Load the audio source on demand!

Still slow, DOM parsing tie

<audio id="audio-1">
	<source src="audio/0002.mp3" type="audio/mpeg" />
</audio>

<audio id="audio-0002">
</audio>

----

Reference

Named Colors
http://www.rapidtables.com/web/color/Gold_Color.htm

Audio/Video Events
http://html5doctor.com/html5-audio-the-state-of-play/
https://html.spec.whatwg.org/multipage/embedded-content.html#mediaevents
https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Media_events

Web Scraping
FAVORITE!!! http://maxogden.com/scraping-with-node.html
https://www.digitalocean.com/community/tutorials/how-to-use-node-js-request-and-cheerio-to-set-up-simple-web-scraping


----

// Choose source language
// http://www.goethe-verlag.com/book2/

// Root for languages for American English
// http://www.goethe-verlag.com/book2/EM/

// Phrase book for Korean (from American English)
// http://www.goethe-verlag.com/book2/EM/EMKO/EMKO002.HTM

// Choose source and destination language!
// American: 55 languages!

// 56 Source languages in: http://www.goethe-verlag.com/book2/
// $('#row-flags').find('a').length

// to 55 destination languages in: http://www.goethe-verlag.com/book2/EM/
// accordion-inner contains "Phrase book" or "숙어집"
// => HTML is the universal language!
// $('.accordion-inner').length


